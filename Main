package com.doublejump.bluenatural;

import org.bukkit.Bukkit;
import org.bukkit.Effect;
import org.bukkit.GameMode;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Server;
import org.bukkit.Sound;
import org.bukkit.block.Block;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.command.ConsoleCommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.event.player.PlayerToggleFlightEvent;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.util.Vector;

import net.md_5.bungee.api.ChatColor;


public class Main extends JavaPlugin implements Listener {
	public static Plugin plugin;
	public static Server server;
	public static String pluginName;
	public static String pluginVersion;
	String cslprefix = "[DoubleJump] ";
	@Override
    public void onLoad()
    {
	    plugin = this;
        server = plugin.getServer();
        NLog.setPluginLogger(plugin.getLogger());
        NLog.setPluginLogger(plugin.getLogger());
        pluginName = plugin.getDescription().getName();
        pluginVersion = plugin.getDescription().getVersion();
        this.saveDefaultConfig();
    }
	public void loadingConfiguration(){
		String prefix = "prefix";
		plugin.getConfig().addDefault(prefix, "&7&l[&a&lDoubleJump&7&l] &c> ");
		
		String particlejump = "particle-jump";
		plugin.getConfig().addDefault(particlejump, "FIREWORKS_SPARK");
		String delayjump = "delay-jumping";
		plugin.getConfig().addDefault(delayjump, Integer.valueOf(3));
		
		String sounddoublejump = "sound.double-jump";
		plugin.getConfig().addDefault(sounddoublejump, "ENTITY_WITHER_SHOOT");
		String souncooldown = "sound.cooldown";
		plugin.getConfig().addDefault(souncooldown, "BLOCK_NOTE_PLING");
		
		String titleactive = "title-active";
		plugin.getConfig().addDefault(titleactive, "&aCAN ACTIVE !");
		String titlecooldown = "title-cooldown";
		plugin.getConfig().addDefault(titlecooldown, "&7&l[&a&lDoubleJump&7&l]");
		String subtitlecooldown = "subtitle-cooldown";
		plugin.getConfig().addDefault(subtitlecooldown, "&fPlease wait in:&c");
		
		String reload = "reload";
		plugin.getConfig().addDefault(reload, "&aReload Successfully !");
		
		String noperm = "no-perm";
		plugin.getConfig().addDefault(noperm, "&cSorry ! You are not allowed to do this command ! Please contact to Admin or have this perm to do this !");
		
		getConfig().options().copyDefaults(true);
		saveDefaultConfig();
		
	}
	public void onEnable(){
			plugin = this;
			getServer().getPluginManager().enablePlugin(this);
			ConsoleCommandSender console = getServer().getConsoleSender();
			PluginDescriptionFile pdf = getDescription();
			console.sendMessage(this.cslprefix + ChatColor.GREEN + "Found Vault and ParticleLib,will start plugin in a few seconds");
			loadingConfiguration();
			getServer().getPluginManager().registerEvents(this, this);
			console.sendMessage(this.cslprefix + ChatColor.YELLOW + "The plugin started and active !");
			console.sendMessage(ChatColor.GREEN + pdf.getName() + pdf.getVersion());
			console.sendMessage(this.cslprefix + ChatColor.GREEN + "Have problem this plugin ! Contact me:" + pdf.getWebsite());		
				
	}

	

	@EventHandler
	public void onDoubleJump(PlayerToggleFlightEvent e){
		Player p = e.getPlayer();
		Location loc = p.getLocation();
		if(p.getGameMode() == GameMode.CREATIVE || p.getGameMode() == GameMode.SPECTATOR || !p.hasPermission("dj.doublejump")){
	 		//TODO Set default when has gamemode Creative and Spectator
			e.setCancelled(false);			
		}else{
					
			Block b = p.getWorld().getBlockAt(p.getLocation().subtract(0,2,0));
			if(b.getType().equals(Material.AIR)){				
					//TODO Create double jumping
					//Disable to prevent wobbling
					 e.setCancelled(true);
				     p.setAllowFlight(false);
				     p.setFlying(false); 	 	   
		        Vector v = p.getLocation().getDirection().multiply(1).setY(1);
		        p.setVelocity(v);
				loc.getWorld().playEffect(loc, Effect.EXPLOSION, 4, 4);
			    loc.getWorld().playEffect(loc, Effect.valueOf(Main.this.getConfig().getString("particle-jump")), 5);
			    loc.getWorld().playEffect(loc, Effect.valueOf(Main.this.getConfig().getString("particle-jump")), 5);
			    loc.getWorld().playEffect(loc, Effect.valueOf(Main.this.getConfig().getString("particle-jump")), 5);
			    loc.getWorld().playEffect(loc, Effect.valueOf(Main.this.getConfig().getString("particle-jump")), 5);
			    loc.getWorld().playEffect(loc, Effect.valueOf(Main.this.getConfig().getString("particle-jump")), 5);
			    loc.getWorld().playEffect(loc, Effect.valueOf(Main.this.getConfig().getString("particle-jump")), 5);
			    loc.getWorld().playEffect(loc, Effect.valueOf(Main.this.getConfig().getString("particle-jump")), 5);
			    loc.getWorld().playEffect(loc, Effect.valueOf(Main.this.getConfig().getString("particle-jump")), 5);
			    loc.getWorld().playEffect(loc, Effect.valueOf(Main.this.getConfig().getString("particle-jump")), 5);
			    loc.getWorld().playEffect(loc, Effect.valueOf(Main.this.getConfig().getString("particle-jump")), 5);
			    loc.getWorld().playEffect(loc, Effect.valueOf(Main.this.getConfig().getString("particle-jump")), 5);
				p.playSound(loc, Sound.valueOf(Main.this.getConfig().getString("sound.double-jump")), 4.0F, 1.0F);
							
		}
				
			}
		}
			
		
		
	
	@SuppressWarnings("deprecation")
	@EventHandler
	public void onMove(PlayerMoveEvent e){
		Player p = e.getPlayer();
		Location loc = p.getLocation();
		if(!p.isOnGround()){
		Integer cooldown = plugin.getConfig().getInt("delay-jumping");
		Titles.sendTitle(p, ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("title-cooldown")), ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("subtitle-cooldown") + cooldown), 0, 20, 0);
	     p.playSound(loc, Sound.valueOf(Main.this.getConfig().getString("sound.cooldown")), 4F, 1F);
		Bukkit.getServer().getScheduler().runTaskLater(this, new Runnable(){
			public void run(){		
			p.setAllowFlight(true);
			return;
		}
			},20L * cooldown);
		}
	
	}
	@EventHandler
	public void onQuit(PlayerQuitEvent e){
		Player p = e.getPlayer();
		p.setAllowFlight(false);
		return;
	}
	
	 public boolean onCommand(CommandSender sender, Command cmd, String commandLabel, String[] args) {
			ConsoleCommandSender console = Bukkit.getConsoleSender();
			if (!(sender instanceof Player)) {
				console.sendMessage(this.cslprefix + ChatColor.RED + "This command only use in game");			
}else{
	Player p = (Player) sender;
	if(cmd.getName().equalsIgnoreCase("doublejump")){
		if(args.length < 1){
		if(p.hasPermission("dj.help")){
				p.sendMessage(ChatColor.translateAlternateColorCodes('&', "&a&m-----------------------------------------------"));
				p.sendMessage(ChatColor.translateAlternateColorCodes('&', "&d/doublejump enable &e- kích hoạt chế đô nhảy 2 lần"));
				p.sendMessage(ChatColor.translateAlternateColorCodes('&', "&d/doublejump disable &e- hủy bỏ chế độ nhảy 2 lần"));
				p.sendMessage(ChatColor.translateAlternateColorCodes('&', "&d/doublejump reload &a- reload plugin"));
				p.sendMessage(ChatColor.translateAlternateColorCodes('&', "&a&m-----------------------------------------------"));
				return true;
				
			}else{
				p.sendMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("prefix"))+
						ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("no-perm")));
				return true;
			}
		}else if(args.length == 1 && args[0].equalsIgnoreCase("enable")){
			if(p.hasPermission("dj.enable")){
				getServer().getPluginManager().enablePlugin(this);
				p.sendMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("prefix"))+
						ChatColor.translateAlternateColorCodes('&', "&ađã bật chế độ Double Jump !"));
			}else{
				p.sendMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("prefix"))+
						ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("no-perm")));
				
				return true;
			}
		}else if(args.length == 1 && args[0].equalsIgnoreCase("disable")){
			if(p.hasPermission("dj.disable")){
				getServer().getPluginManager().disablePlugin(this);
				p.sendMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("prefix"))+
						ChatColor.translateAlternateColorCodes('&', "&cđã tắt chế độ Double Jump !"));
				return true;
			}else{
				p.sendMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("prefix"))+
						ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("no-perm")));
				
				return true;
			}
		}else if(args.length == 1 && args[0].equalsIgnoreCase("reload")){
			if(p.hasPermission("dj.reload")){
				ReloadingConfiguration();
				p.sendMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("reload")));
				return true;
			}else{
				p.sendMessage(ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("prefix"))+
						ChatColor.translateAlternateColorCodes('&', Main.this.getConfig().getString("no-perm")));
				
				return true;
			}
				
		}
	}
	
}
			return true;
	 }
	public void ReloadingConfiguration() {
		// TODO Reload plugin.If make original can have error case
		reloadConfig();
	saveConfig();
	}
}
